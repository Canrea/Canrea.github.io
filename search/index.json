[{"content":" maven-compiler-plugin插件 maven-compiler-plugin插件用于编译项目代码，其默认JDK版本可能不适用所有项目。通过配置插件的source和target属性，可以指定源码和目标编译的JDK版本，解决版本不匹配导致的编译问题。\nmaven-compiler-plugin插件的主要作用 指定JDK版本：Maven默认使用的JDK版本可能并不符合项目的实际需求，这样就容易出现版本不匹配，以至于可能导致编译不通过的问题。通过使用maven-compiler-plugin插件可以明确指定源代码所使用的JDK版本，以及编译后的类库运行的JVM版本，从而确保项目在不同环境中的一致性和稳定性。\n设置编码方式：源代码的编码方式对于编译和运行环境至关重要，maven-compiler-plugin插件允许设置代码和目标代码的编码方式，以防止因编码不一致导致的编译错误或乱码问题。\n优化编译过程：maven-compiler-plugin插件提供了丰富的配置选项，可以对编译过程进行细粒度的控制。例如，可以设置是否使用增量编译、是否生成调试信息等，以提高编译效率和代码质量。\n注意点 在配置maven-compiler-plugin插件时，需要注意以下几点：\n插件版本：确保使用的maven-compiler-plugin版本与Maven版本和JDK版本兼容，不同版本的插件可能具有不同的功能和配置选项。 JDK版本：根据项目实际需求选择合适的JDK版本，如果项目使用了较新的Java特性，需要确保JDK版本支持这些特性。 编码方式：确保源代码文件的编码方式与maven-compiler-plugin设置的编码方式一致，以避免编码问题导致的编译错误。 配置项 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;!-- 版本，要和jdk版本匹配 --\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;!-- 源码jdk版本 --\u0026gt; \u0026lt;source\u0026gt;1.8\u0026lt;/source\u0026gt; \u0026lt;!-- 目标jdk版本 --\u0026gt; \u0026lt;target\u0026gt;1.8\u0026lt;/target\u0026gt; \u0026lt;!-- 编码 --\u0026gt; \u0026lt;encoding\u0026gt;UTF-8\u0026lt;/encoding\u0026gt; \u0026lt;!-- 输出编译的详细细节，方便了解编译情况 --\u0026gt; \u0026lt;verbose\u0026gt;true\u0026lt;/verbose\u0026gt; \u0026lt;!-- 要使compilerVersion标签生效，还需要将fork设为true， 用于明确表示编译版本配置的可用。 fork和executable一般搭配使用，如果省略executable并设置true， maven编译器插件默认选择JAVA_HOME/bin/javac二进制文件， 如果设置了false，maven编译器插件将通过ToolProvider接口选择编译器。 这意味着不会启动新进程，Maven正在运行的JavaVM与会进行编译。 executable表示javac的绝对路径，默认会寻找环境变量JAVA_HOME的位置。 executable也可以自己设置一个路径。--\u0026gt; \u0026lt;fork\u0026gt;true\u0026lt;/fork\u0026gt; \u0026lt;!-- 设置外部jdk命令 --\u0026gt; \u0026lt;executable\u0026gt;${JAVA_HOME}/bin/javac\u0026lt;/executable\u0026gt; \u0026lt;!-- 最小内存 --\u0026gt; \u0026lt;meminitial\u0026gt;128m\u0026lt;/meminitial\u0026gt; \u0026lt;!-- 最大内存 --\u0026gt; \u0026lt;maxmem\u0026gt;512m\u0026lt;/maxmem\u0026gt; \u0026lt;!-- 设置编译时jdk的版本信息 --\u0026gt; \u0026lt;compilerVersion\u0026gt;1.8\u0026lt;/compilerVersion\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; spring-boot-maven-plugin插件 该插件是项目打包插件，可以配置打包的参数，不同参数会打出不同的jar/war包\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!--使用的插件列表 。 --\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;!--plugin元素包含描述插件所需要的信息。 --\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;!--插件在仓库里的group ID --\u0026gt; \u0026lt;groupId /\u0026gt; \u0026lt;!--插件在仓库里的artifact ID --\u0026gt; \u0026lt;artifactId /\u0026gt; \u0026lt;!--被使用的插件的版本（或版本范围） --\u0026gt; \u0026lt;version /\u0026gt; \u0026lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --\u0026gt; \u0026lt;extensions /\u0026gt; \u0026lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;!--execution元素包含了插件执行需要的信息 --\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --\u0026gt; \u0026lt;id /\u0026gt; \u0026lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --\u0026gt; \u0026lt;phase /\u0026gt; \u0026lt;!--配置的执行目标 --\u0026gt; \u0026lt;goals /\u0026gt; \u0026lt;!--配置是否被传播到子POM --\u0026gt; \u0026lt;inherited /\u0026gt; \u0026lt;!--作为DOM对象的配置 --\u0026gt; \u0026lt;configuration /\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;!--项目引入插件所需要的额外依赖 --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--参见dependencies/dependency元素 --\u0026gt; \u0026lt;dependency\u0026gt; ...... \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;!--任何配置是否被传播到子项目 --\u0026gt; \u0026lt;inherited /\u0026gt; \u0026lt;!--作为DOM对象的配置 --\u0026gt; \u0026lt;configuration /\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; goals的可选值 build-image: 将程序使用 buildpack 打包进容器镜像中。\nbuild-info：生成项目的构建信息文件 build-info.properties。根据当前 MavenProject 的内容生成一个 - build-info.properties 文件\nhelp：显示帮助信息。调用mvn spring-boot:help -Ddetail=true -Dgoal=以显示参数详细信息。\nrepackage：可生成可执行的jar包或war包。插件的核心goal。 默认的 goal，将普通 mvn package 打包成的 jar 重新打包成包含所有程序依赖项的可执行 jar/war 文件，并保留 mvn package 打包的 jar 为 .original 后缀\nrun：运行 Spring Boot 应用\nstart：在集成测试阶段，控制生命周期。通常用于集成测试方案中，在 mvn integration-test 阶段管理 Spring Boot 应用的生命周期。\nstop：在集成测试阶段，控制生命周期。停止已通过 start 目标启动的应用程序。通常在 integration\u0026ndash; test 完成后调用。\n打包 将SpringBoot项目打包成Jar文件\n方法一 在idea右侧的Maven工具栏里面选择要打包的项目\u0026mdash;\u0026gt;点击Lifecycle\u0026mdash;\u0026gt;点击package。打包好的jar文件默认会生成在左侧项目列表的target里面。\n方法二 进入需要打包的项目主目录，在地址栏输入cmd，进入命令行控制台，在命令行执行以下代码。\n1 mvn clean package -Dmaven.test.skip=true 注意事项\njdk的环境变量需要配置好 maven的也要加入环境变量中 运行 1 Java -jar \u0026#34;jar包所在路径\u0026#34; ","date":"2024-11-12T13:19:11+08:00","permalink":"https://Canrea.github.io/p/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/","title":"SpringBoot项目打包"},{"content":" 通过Spring Initalizr创建 新建项目，选择Spring Initalizr（新版本显示 SpringBoot） 填写配置信息 Name : 项目名称\nLocation: 项目存放的位置\nLanguage: 开发语言\nType: 一般都选Maven进行依赖管理\nGroup: 所属组名\nArtifact: 项目名称\nPackage name: 包名\nJDK: JDK版本\nJava: 同上\nPackaging: 打包方式（springBoot应用一般都打成jar包）\n选择所需依赖 SpringBoot: 选择SpringBoot版本\n下面复选框: 选择所需的依赖\nCreate: 创建项目\n等待项目下载完成 启动项目 点击启动类左边的绿色三角型，或者右上角的绿色三角形，就能启动项目\n通过Maven创建SpringBoot项目 新建项目，选择maven 点击Create，创建项目，等待项目创建完成 修改pom.xml文件,点击右上角刷新按钮，下载依赖 给启动了加上@SpringBootApplication注解，并添加启动代码 启动成功 依赖管理 在父工程集中定义项目所需依赖的版本号\nspring-boot-dependencies 是Spring Boot提供的另一个重要的Maven项目，用于集中管理所有Spring Boot相关依赖的版本信息。\n特点 包含了Spring Boot中所有的starter依赖的版本信息，包括Spring Framework、Spring Boot自身以及其他常用的第三方库。 使用了部分来管理依赖的版本信息，但是不会直接引入依赖。 提供了一种简化依赖声明的方式，只需要声明spring-boot-starter-*相关的依赖，而无需指定版本号，因为版本号已经被spring-boot-dependencies管理了。 使用方法 在父工程的pom.xml中添加以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;properties\u0026gt; \u0026lt;!-- 定义jdk版本 --\u0026gt; \u0026lt;java.version\u0026gt;8\u0026lt;/java.version\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;!-- 定义springboot版本 --\u0026gt; \u0026lt;spring-boot.version\u0026gt;3.0.2\u0026lt;/spring-boot.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!-- 引入阿里云的版本定义文件 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring-boot.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; ","date":"2024-11-11T18:29:39Z","permalink":"https://Canrea.github.io/p/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/","title":"创建SpringBoot项目"},{"content":"Hello world! ","date":"2024-11-02T18:29:39+08:00","image":"https://Canrea.github.io/p/hello_world/header_hu4927507090986297842.jpg","permalink":"https://Canrea.github.io/p/hello_world/","title":"Hello_World"}]